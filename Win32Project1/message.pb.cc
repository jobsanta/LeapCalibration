// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FrameMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrameMsg> {
} _FrameMsg_default_instance_;
class SceneMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SceneMsg> {
} _SceneMsg_default_instance_;
class VObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VObject> {
} _VObject_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, headpos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, headpos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, headpos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameMsg, frame_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, objects_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, headpos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, headpos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, headpos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneMsg, scene_objects_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, size_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, size_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, size_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, p_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, p_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, p_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, q_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, q_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, q_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, q_w_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, color_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, color_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, color_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VObject, color_w_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FrameMsg)},
  { 10, -1, sizeof(SceneMsg)},
  { 20, -1, sizeof(VObject)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VObject_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _FrameMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SceneMsg_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _VObject_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FrameMsg_default_instance_.DefaultConstruct();
  _SceneMsg_default_instance_.DefaultConstruct();
  _VObject_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\"c\n\010FrameMsg\022\017\n\007command\030\001"
      " \001(\005\022\021\n\theadPos_x\030\002 \001(\002\022\021\n\theadPos_y\030\003 \001"
      "(\002\022\021\n\theadPos_z\030\004 \001(\002\022\r\n\005frame\030% \001(\014\"{\n\010"
      "SceneMsg\022\025\n\robjects_count\030\002 \001(\005\022\021\n\theadP"
      "os_x\030\003 \001(\002\022\021\n\theadPos_y\030\004 \001(\002\022\021\n\theadPos"
      "_z\030\005 \001(\002\022\037\n\rscene_objects\030\001 \003(\0132\010.VObjec"
      "t\"\240\003\n\007VObject\022\"\n\004type\030\001 \001(\0162\024.VObject.VO"
      "bjectType\022\016\n\006size_x\030\002 \001(\002\022\016\n\006size_y\030\003 \001("
      "\002\022\016\n\006size_z\030\004 \001(\002\022\013\n\003p_x\030\005 \001(\002\022\013\n\003p_y\030\006 "
      "\001(\002\022\013\n\003p_z\030\007 \001(\002\022\013\n\003q_x\030\010 \001(\002\022\013\n\003q_y\030\t \001"
      "(\002\022\013\n\003q_z\030\n \001(\002\022\013\n\003q_w\030\013 \001(\002\022\017\n\007color_x\030"
      "\014 \001(\002\022\017\n\007color_y\030\r \001(\002\022\017\n\007color_z\030\016 \001(\002\022"
      "\017\n\007color_w\030\017 \001(\002\"\241\001\n\013VObjectType\022\013\n\007Unkn"
      "own\020\000\022\n\n\006Finger\020\001\022\016\n\nFinger_tip\020\002\022\010\n\004Pal"
      "m\020\003\022\013\n\007rFinger\020\010\022\017\n\013rFinger_tip\020\t\022\t\n\005rPa"
      "lm\020\n\022\n\n\006Sphere\020\004\022\021\n\rTextureSphere\020\005\022\007\n\003B"
      "ox\020\006\022\016\n\nTextureBox\020\007b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* VObject_VObjectType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool VObject_VObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VObject_VObjectType VObject::Unknown;
const VObject_VObjectType VObject::Finger;
const VObject_VObjectType VObject::Finger_tip;
const VObject_VObjectType VObject::Palm;
const VObject_VObjectType VObject::rFinger;
const VObject_VObjectType VObject::rFinger_tip;
const VObject_VObjectType VObject::rPalm;
const VObject_VObjectType VObject::Sphere;
const VObject_VObjectType VObject::TextureSphere;
const VObject_VObjectType VObject::Box;
const VObject_VObjectType VObject::TextureBox;
const VObject_VObjectType VObject::VObjectType_MIN;
const VObject_VObjectType VObject::VObjectType_MAX;
const int VObject::VObjectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameMsg::kCommandFieldNumber;
const int FrameMsg::kHeadPosXFieldNumber;
const int FrameMsg::kHeadPosYFieldNumber;
const int FrameMsg::kHeadPosZFieldNumber;
const int FrameMsg::kFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameMsg::FrameMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FrameMsg)
}
FrameMsg::FrameMsg(const FrameMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.frame().size() > 0) {
    frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  ::memcpy(&command_, &from.command_,
    reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&command_) + sizeof(headpos_z_));
  // @@protoc_insertion_point(copy_constructor:FrameMsg)
}

void FrameMsg::SharedCtor() {
  frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&command_) + sizeof(headpos_z_));
  _cached_size_ = 0;
}

FrameMsg::~FrameMsg() {
  // @@protoc_insertion_point(destructor:FrameMsg)
  SharedDtor();
}

void FrameMsg::SharedDtor() {
  frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameMsg::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameMsg& FrameMsg::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameMsg* FrameMsg::New(::google::protobuf::Arena* arena) const {
  FrameMsg* n = new FrameMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:FrameMsg)
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&command_, 0, reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&command_) + sizeof(headpos_z_));
}

bool FrameMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FrameMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes frame = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FrameMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FrameMsg)
  return false;
#undef DO_
}

void FrameMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FrameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // float headPos_x = 2;
  if (this->headpos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->headpos_x(), output);
  }

  // float headPos_y = 3;
  if (this->headpos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->headpos_y(), output);
  }

  // float headPos_z = 4;
  if (this->headpos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->headpos_z(), output);
  }

  // bytes frame = 37;
  if (this->frame().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      37, this->frame(), output);
  }

  // @@protoc_insertion_point(serialize_end:FrameMsg)
}

::google::protobuf::uint8* FrameMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FrameMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // float headPos_x = 2;
  if (this->headpos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->headpos_x(), target);
  }

  // float headPos_y = 3;
  if (this->headpos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->headpos_y(), target);
  }

  // float headPos_z = 4;
  if (this->headpos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->headpos_z(), target);
  }

  // bytes frame = 37;
  if (this->frame().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        37, this->frame(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FrameMsg)
  return target;
}

size_t FrameMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FrameMsg)
  size_t total_size = 0;

  // bytes frame = 37;
  if (this->frame().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->frame());
  }

  // int32 command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  // float headPos_x = 2;
  if (this->headpos_x() != 0) {
    total_size += 1 + 4;
  }

  // float headPos_y = 3;
  if (this->headpos_y() != 0) {
    total_size += 1 + 4;
  }

  // float headPos_z = 4;
  if (this->headpos_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FrameMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FrameMsg)
    MergeFrom(*source);
  }
}

void FrameMsg::MergeFrom(const FrameMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FrameMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame().size() > 0) {

    frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.headpos_x() != 0) {
    set_headpos_x(from.headpos_x());
  }
  if (from.headpos_y() != 0) {
    set_headpos_y(from.headpos_y());
  }
  if (from.headpos_z() != 0) {
    set_headpos_z(from.headpos_z());
  }
}

void FrameMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMsg::CopyFrom(const FrameMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FrameMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMsg::IsInitialized() const {
  return true;
}

void FrameMsg::Swap(FrameMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameMsg::InternalSwap(FrameMsg* other) {
  frame_.Swap(&other->frame_);
  std::swap(command_, other->command_);
  std::swap(headpos_x_, other->headpos_x_);
  std::swap(headpos_y_, other->headpos_y_);
  std::swap(headpos_z_, other->headpos_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameMsg::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameMsg

// int32 command = 1;
void FrameMsg::clear_command() {
  command_ = 0;
}
::google::protobuf::int32 FrameMsg::command() const {
  // @@protoc_insertion_point(field_get:FrameMsg.command)
  return command_;
}
void FrameMsg::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:FrameMsg.command)
}

// float headPos_x = 2;
void FrameMsg::clear_headpos_x() {
  headpos_x_ = 0;
}
float FrameMsg::headpos_x() const {
  // @@protoc_insertion_point(field_get:FrameMsg.headPos_x)
  return headpos_x_;
}
void FrameMsg::set_headpos_x(float value) {
  
  headpos_x_ = value;
  // @@protoc_insertion_point(field_set:FrameMsg.headPos_x)
}

// float headPos_y = 3;
void FrameMsg::clear_headpos_y() {
  headpos_y_ = 0;
}
float FrameMsg::headpos_y() const {
  // @@protoc_insertion_point(field_get:FrameMsg.headPos_y)
  return headpos_y_;
}
void FrameMsg::set_headpos_y(float value) {
  
  headpos_y_ = value;
  // @@protoc_insertion_point(field_set:FrameMsg.headPos_y)
}

// float headPos_z = 4;
void FrameMsg::clear_headpos_z() {
  headpos_z_ = 0;
}
float FrameMsg::headpos_z() const {
  // @@protoc_insertion_point(field_get:FrameMsg.headPos_z)
  return headpos_z_;
}
void FrameMsg::set_headpos_z(float value) {
  
  headpos_z_ = value;
  // @@protoc_insertion_point(field_set:FrameMsg.headPos_z)
}

// bytes frame = 37;
void FrameMsg::clear_frame() {
  frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FrameMsg::frame() const {
  // @@protoc_insertion_point(field_get:FrameMsg.frame)
  return frame_.GetNoArena();
}
void FrameMsg::set_frame(const ::std::string& value) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FrameMsg.frame)
}
#if LANG_CXX11
void FrameMsg::set_frame(::std::string&& value) {
  
  frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FrameMsg.frame)
}
#endif
void FrameMsg::set_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FrameMsg.frame)
}
void FrameMsg::set_frame(const void* value, size_t size) {
  
  frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FrameMsg.frame)
}
::std::string* FrameMsg::mutable_frame() {
  
  // @@protoc_insertion_point(field_mutable:FrameMsg.frame)
  return frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameMsg::release_frame() {
  // @@protoc_insertion_point(field_release:FrameMsg.frame)
  
  return frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameMsg::set_allocated_frame(::std::string* frame) {
  if (frame != NULL) {
    
  } else {
    
  }
  frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:FrameMsg.frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneMsg::kObjectsCountFieldNumber;
const int SceneMsg::kHeadPosXFieldNumber;
const int SceneMsg::kHeadPosYFieldNumber;
const int SceneMsg::kHeadPosZFieldNumber;
const int SceneMsg::kSceneObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneMsg::SceneMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SceneMsg)
}
SceneMsg::SceneMsg(const SceneMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scene_objects_(from.scene_objects_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objects_count_, &from.objects_count_,
    reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&objects_count_) + sizeof(headpos_z_));
  // @@protoc_insertion_point(copy_constructor:SceneMsg)
}

void SceneMsg::SharedCtor() {
  ::memset(&objects_count_, 0, reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&objects_count_) + sizeof(headpos_z_));
  _cached_size_ = 0;
}

SceneMsg::~SceneMsg() {
  // @@protoc_insertion_point(destructor:SceneMsg)
  SharedDtor();
}

void SceneMsg::SharedDtor() {
}

void SceneMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneMsg::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneMsg& SceneMsg::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneMsg* SceneMsg::New(::google::protobuf::Arena* arena) const {
  SceneMsg* n = new SceneMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:SceneMsg)
  scene_objects_.Clear();
  ::memset(&objects_count_, 0, reinterpret_cast<char*>(&headpos_z_) -
    reinterpret_cast<char*>(&objects_count_) + sizeof(headpos_z_));
}

bool SceneMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SceneMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VObject scene_objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 objects_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objects_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float headPos_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &headpos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SceneMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SceneMsg)
  return false;
#undef DO_
}

void SceneMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SceneMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VObject scene_objects = 1;
  for (unsigned int i = 0, n = this->scene_objects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scene_objects(i), output);
  }

  // int32 objects_count = 2;
  if (this->objects_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objects_count(), output);
  }

  // float headPos_x = 3;
  if (this->headpos_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->headpos_x(), output);
  }

  // float headPos_y = 4;
  if (this->headpos_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->headpos_y(), output);
  }

  // float headPos_z = 5;
  if (this->headpos_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->headpos_z(), output);
  }

  // @@protoc_insertion_point(serialize_end:SceneMsg)
}

::google::protobuf::uint8* SceneMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SceneMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VObject scene_objects = 1;
  for (unsigned int i = 0, n = this->scene_objects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scene_objects(i), deterministic, target);
  }

  // int32 objects_count = 2;
  if (this->objects_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objects_count(), target);
  }

  // float headPos_x = 3;
  if (this->headpos_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->headpos_x(), target);
  }

  // float headPos_y = 4;
  if (this->headpos_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->headpos_y(), target);
  }

  // float headPos_z = 5;
  if (this->headpos_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->headpos_z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SceneMsg)
  return target;
}

size_t SceneMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SceneMsg)
  size_t total_size = 0;

  // repeated .VObject scene_objects = 1;
  {
    unsigned int count = this->scene_objects_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_objects(i));
    }
  }

  // int32 objects_count = 2;
  if (this->objects_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->objects_count());
  }

  // float headPos_x = 3;
  if (this->headpos_x() != 0) {
    total_size += 1 + 4;
  }

  // float headPos_y = 4;
  if (this->headpos_y() != 0) {
    total_size += 1 + 4;
  }

  // float headPos_z = 5;
  if (this->headpos_z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SceneMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SceneMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SceneMsg)
    MergeFrom(*source);
  }
}

void SceneMsg::MergeFrom(const SceneMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SceneMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_objects_.MergeFrom(from.scene_objects_);
  if (from.objects_count() != 0) {
    set_objects_count(from.objects_count());
  }
  if (from.headpos_x() != 0) {
    set_headpos_x(from.headpos_x());
  }
  if (from.headpos_y() != 0) {
    set_headpos_y(from.headpos_y());
  }
  if (from.headpos_z() != 0) {
    set_headpos_z(from.headpos_z());
  }
}

void SceneMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SceneMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneMsg::CopyFrom(const SceneMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SceneMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneMsg::IsInitialized() const {
  return true;
}

void SceneMsg::Swap(SceneMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneMsg::InternalSwap(SceneMsg* other) {
  scene_objects_.InternalSwap(&other->scene_objects_);
  std::swap(objects_count_, other->objects_count_);
  std::swap(headpos_x_, other->headpos_x_);
  std::swap(headpos_y_, other->headpos_y_);
  std::swap(headpos_z_, other->headpos_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneMsg::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneMsg

// int32 objects_count = 2;
void SceneMsg::clear_objects_count() {
  objects_count_ = 0;
}
::google::protobuf::int32 SceneMsg::objects_count() const {
  // @@protoc_insertion_point(field_get:SceneMsg.objects_count)
  return objects_count_;
}
void SceneMsg::set_objects_count(::google::protobuf::int32 value) {
  
  objects_count_ = value;
  // @@protoc_insertion_point(field_set:SceneMsg.objects_count)
}

// float headPos_x = 3;
void SceneMsg::clear_headpos_x() {
  headpos_x_ = 0;
}
float SceneMsg::headpos_x() const {
  // @@protoc_insertion_point(field_get:SceneMsg.headPos_x)
  return headpos_x_;
}
void SceneMsg::set_headpos_x(float value) {
  
  headpos_x_ = value;
  // @@protoc_insertion_point(field_set:SceneMsg.headPos_x)
}

// float headPos_y = 4;
void SceneMsg::clear_headpos_y() {
  headpos_y_ = 0;
}
float SceneMsg::headpos_y() const {
  // @@protoc_insertion_point(field_get:SceneMsg.headPos_y)
  return headpos_y_;
}
void SceneMsg::set_headpos_y(float value) {
  
  headpos_y_ = value;
  // @@protoc_insertion_point(field_set:SceneMsg.headPos_y)
}

// float headPos_z = 5;
void SceneMsg::clear_headpos_z() {
  headpos_z_ = 0;
}
float SceneMsg::headpos_z() const {
  // @@protoc_insertion_point(field_get:SceneMsg.headPos_z)
  return headpos_z_;
}
void SceneMsg::set_headpos_z(float value) {
  
  headpos_z_ = value;
  // @@protoc_insertion_point(field_set:SceneMsg.headPos_z)
}

// repeated .VObject scene_objects = 1;
int SceneMsg::scene_objects_size() const {
  return scene_objects_.size();
}
void SceneMsg::clear_scene_objects() {
  scene_objects_.Clear();
}
const ::VObject& SceneMsg::scene_objects(int index) const {
  // @@protoc_insertion_point(field_get:SceneMsg.scene_objects)
  return scene_objects_.Get(index);
}
::VObject* SceneMsg::mutable_scene_objects(int index) {
  // @@protoc_insertion_point(field_mutable:SceneMsg.scene_objects)
  return scene_objects_.Mutable(index);
}
::VObject* SceneMsg::add_scene_objects() {
  // @@protoc_insertion_point(field_add:SceneMsg.scene_objects)
  return scene_objects_.Add();
}
::google::protobuf::RepeatedPtrField< ::VObject >*
SceneMsg::mutable_scene_objects() {
  // @@protoc_insertion_point(field_mutable_list:SceneMsg.scene_objects)
  return &scene_objects_;
}
const ::google::protobuf::RepeatedPtrField< ::VObject >&
SceneMsg::scene_objects() const {
  // @@protoc_insertion_point(field_list:SceneMsg.scene_objects)
  return scene_objects_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VObject::kTypeFieldNumber;
const int VObject::kSizeXFieldNumber;
const int VObject::kSizeYFieldNumber;
const int VObject::kSizeZFieldNumber;
const int VObject::kPXFieldNumber;
const int VObject::kPYFieldNumber;
const int VObject::kPZFieldNumber;
const int VObject::kQXFieldNumber;
const int VObject::kQYFieldNumber;
const int VObject::kQZFieldNumber;
const int VObject::kQWFieldNumber;
const int VObject::kColorXFieldNumber;
const int VObject::kColorYFieldNumber;
const int VObject::kColorZFieldNumber;
const int VObject::kColorWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VObject::VObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:VObject)
}
VObject::VObject(const VObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&color_w_) -
    reinterpret_cast<char*>(&type_) + sizeof(color_w_));
  // @@protoc_insertion_point(copy_constructor:VObject)
}

void VObject::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&color_w_) -
    reinterpret_cast<char*>(&type_) + sizeof(color_w_));
  _cached_size_ = 0;
}

VObject::~VObject() {
  // @@protoc_insertion_point(destructor:VObject)
  SharedDtor();
}

void VObject::SharedDtor() {
}

void VObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VObject::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VObject& VObject::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

VObject* VObject::New(::google::protobuf::Arena* arena) const {
  VObject* n = new VObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VObject::Clear() {
// @@protoc_insertion_point(message_clear_start:VObject)
  ::memset(&type_, 0, reinterpret_cast<char*>(&color_w_) -
    reinterpret_cast<char*>(&type_) + sizeof(color_w_));
}

bool VObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .VObject.VObjectType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::VObject_VObjectType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float size_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float size_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float size_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q_x = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q_y = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q_z = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float q_w = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_x = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_y = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_z = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float color_w = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VObject)
  return false;
#undef DO_
}

void VObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VObject.VObjectType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // float size_x = 2;
  if (this->size_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->size_x(), output);
  }

  // float size_y = 3;
  if (this->size_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->size_y(), output);
  }

  // float size_z = 4;
  if (this->size_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->size_z(), output);
  }

  // float p_x = 5;
  if (this->p_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->p_x(), output);
  }

  // float p_y = 6;
  if (this->p_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->p_y(), output);
  }

  // float p_z = 7;
  if (this->p_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->p_z(), output);
  }

  // float q_x = 8;
  if (this->q_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q_x(), output);
  }

  // float q_y = 9;
  if (this->q_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q_y(), output);
  }

  // float q_z = 10;
  if (this->q_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->q_z(), output);
  }

  // float q_w = 11;
  if (this->q_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->q_w(), output);
  }

  // float color_x = 12;
  if (this->color_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->color_x(), output);
  }

  // float color_y = 13;
  if (this->color_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->color_y(), output);
  }

  // float color_z = 14;
  if (this->color_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->color_z(), output);
  }

  // float color_w = 15;
  if (this->color_w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->color_w(), output);
  }

  // @@protoc_insertion_point(serialize_end:VObject)
}

::google::protobuf::uint8* VObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VObject.VObjectType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // float size_x = 2;
  if (this->size_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->size_x(), target);
  }

  // float size_y = 3;
  if (this->size_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->size_y(), target);
  }

  // float size_z = 4;
  if (this->size_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->size_z(), target);
  }

  // float p_x = 5;
  if (this->p_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->p_x(), target);
  }

  // float p_y = 6;
  if (this->p_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->p_y(), target);
  }

  // float p_z = 7;
  if (this->p_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->p_z(), target);
  }

  // float q_x = 8;
  if (this->q_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q_x(), target);
  }

  // float q_y = 9;
  if (this->q_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q_y(), target);
  }

  // float q_z = 10;
  if (this->q_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->q_z(), target);
  }

  // float q_w = 11;
  if (this->q_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->q_w(), target);
  }

  // float color_x = 12;
  if (this->color_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->color_x(), target);
  }

  // float color_y = 13;
  if (this->color_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->color_y(), target);
  }

  // float color_z = 14;
  if (this->color_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->color_z(), target);
  }

  // float color_w = 15;
  if (this->color_w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->color_w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VObject)
  return target;
}

size_t VObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VObject)
  size_t total_size = 0;

  // .VObject.VObjectType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // float size_x = 2;
  if (this->size_x() != 0) {
    total_size += 1 + 4;
  }

  // float size_y = 3;
  if (this->size_y() != 0) {
    total_size += 1 + 4;
  }

  // float size_z = 4;
  if (this->size_z() != 0) {
    total_size += 1 + 4;
  }

  // float p_x = 5;
  if (this->p_x() != 0) {
    total_size += 1 + 4;
  }

  // float p_y = 6;
  if (this->p_y() != 0) {
    total_size += 1 + 4;
  }

  // float p_z = 7;
  if (this->p_z() != 0) {
    total_size += 1 + 4;
  }

  // float q_x = 8;
  if (this->q_x() != 0) {
    total_size += 1 + 4;
  }

  // float q_y = 9;
  if (this->q_y() != 0) {
    total_size += 1 + 4;
  }

  // float q_z = 10;
  if (this->q_z() != 0) {
    total_size += 1 + 4;
  }

  // float q_w = 11;
  if (this->q_w() != 0) {
    total_size += 1 + 4;
  }

  // float color_x = 12;
  if (this->color_x() != 0) {
    total_size += 1 + 4;
  }

  // float color_y = 13;
  if (this->color_y() != 0) {
    total_size += 1 + 4;
  }

  // float color_z = 14;
  if (this->color_z() != 0) {
    total_size += 1 + 4;
  }

  // float color_w = 15;
  if (this->color_w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VObject)
  GOOGLE_DCHECK_NE(&from, this);
  const VObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VObject)
    MergeFrom(*source);
  }
}

void VObject::MergeFrom(const VObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.size_x() != 0) {
    set_size_x(from.size_x());
  }
  if (from.size_y() != 0) {
    set_size_y(from.size_y());
  }
  if (from.size_z() != 0) {
    set_size_z(from.size_z());
  }
  if (from.p_x() != 0) {
    set_p_x(from.p_x());
  }
  if (from.p_y() != 0) {
    set_p_y(from.p_y());
  }
  if (from.p_z() != 0) {
    set_p_z(from.p_z());
  }
  if (from.q_x() != 0) {
    set_q_x(from.q_x());
  }
  if (from.q_y() != 0) {
    set_q_y(from.q_y());
  }
  if (from.q_z() != 0) {
    set_q_z(from.q_z());
  }
  if (from.q_w() != 0) {
    set_q_w(from.q_w());
  }
  if (from.color_x() != 0) {
    set_color_x(from.color_x());
  }
  if (from.color_y() != 0) {
    set_color_y(from.color_y());
  }
  if (from.color_z() != 0) {
    set_color_z(from.color_z());
  }
  if (from.color_w() != 0) {
    set_color_w(from.color_w());
  }
}

void VObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VObject::CopyFrom(const VObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VObject::IsInitialized() const {
  return true;
}

void VObject::Swap(VObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VObject::InternalSwap(VObject* other) {
  std::swap(type_, other->type_);
  std::swap(size_x_, other->size_x_);
  std::swap(size_y_, other->size_y_);
  std::swap(size_z_, other->size_z_);
  std::swap(p_x_, other->p_x_);
  std::swap(p_y_, other->p_y_);
  std::swap(p_z_, other->p_z_);
  std::swap(q_x_, other->q_x_);
  std::swap(q_y_, other->q_y_);
  std::swap(q_z_, other->q_z_);
  std::swap(q_w_, other->q_w_);
  std::swap(color_x_, other->color_x_);
  std::swap(color_y_, other->color_y_);
  std::swap(color_z_, other->color_z_);
  std::swap(color_w_, other->color_w_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VObject::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VObject

// .VObject.VObjectType type = 1;
void VObject::clear_type() {
  type_ = 0;
}
::VObject_VObjectType VObject::type() const {
  // @@protoc_insertion_point(field_get:VObject.type)
  return static_cast< ::VObject_VObjectType >(type_);
}
void VObject::set_type(::VObject_VObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:VObject.type)
}

// float size_x = 2;
void VObject::clear_size_x() {
  size_x_ = 0;
}
float VObject::size_x() const {
  // @@protoc_insertion_point(field_get:VObject.size_x)
  return size_x_;
}
void VObject::set_size_x(float value) {
  
  size_x_ = value;
  // @@protoc_insertion_point(field_set:VObject.size_x)
}

// float size_y = 3;
void VObject::clear_size_y() {
  size_y_ = 0;
}
float VObject::size_y() const {
  // @@protoc_insertion_point(field_get:VObject.size_y)
  return size_y_;
}
void VObject::set_size_y(float value) {
  
  size_y_ = value;
  // @@protoc_insertion_point(field_set:VObject.size_y)
}

// float size_z = 4;
void VObject::clear_size_z() {
  size_z_ = 0;
}
float VObject::size_z() const {
  // @@protoc_insertion_point(field_get:VObject.size_z)
  return size_z_;
}
void VObject::set_size_z(float value) {
  
  size_z_ = value;
  // @@protoc_insertion_point(field_set:VObject.size_z)
}

// float p_x = 5;
void VObject::clear_p_x() {
  p_x_ = 0;
}
float VObject::p_x() const {
  // @@protoc_insertion_point(field_get:VObject.p_x)
  return p_x_;
}
void VObject::set_p_x(float value) {
  
  p_x_ = value;
  // @@protoc_insertion_point(field_set:VObject.p_x)
}

// float p_y = 6;
void VObject::clear_p_y() {
  p_y_ = 0;
}
float VObject::p_y() const {
  // @@protoc_insertion_point(field_get:VObject.p_y)
  return p_y_;
}
void VObject::set_p_y(float value) {
  
  p_y_ = value;
  // @@protoc_insertion_point(field_set:VObject.p_y)
}

// float p_z = 7;
void VObject::clear_p_z() {
  p_z_ = 0;
}
float VObject::p_z() const {
  // @@protoc_insertion_point(field_get:VObject.p_z)
  return p_z_;
}
void VObject::set_p_z(float value) {
  
  p_z_ = value;
  // @@protoc_insertion_point(field_set:VObject.p_z)
}

// float q_x = 8;
void VObject::clear_q_x() {
  q_x_ = 0;
}
float VObject::q_x() const {
  // @@protoc_insertion_point(field_get:VObject.q_x)
  return q_x_;
}
void VObject::set_q_x(float value) {
  
  q_x_ = value;
  // @@protoc_insertion_point(field_set:VObject.q_x)
}

// float q_y = 9;
void VObject::clear_q_y() {
  q_y_ = 0;
}
float VObject::q_y() const {
  // @@protoc_insertion_point(field_get:VObject.q_y)
  return q_y_;
}
void VObject::set_q_y(float value) {
  
  q_y_ = value;
  // @@protoc_insertion_point(field_set:VObject.q_y)
}

// float q_z = 10;
void VObject::clear_q_z() {
  q_z_ = 0;
}
float VObject::q_z() const {
  // @@protoc_insertion_point(field_get:VObject.q_z)
  return q_z_;
}
void VObject::set_q_z(float value) {
  
  q_z_ = value;
  // @@protoc_insertion_point(field_set:VObject.q_z)
}

// float q_w = 11;
void VObject::clear_q_w() {
  q_w_ = 0;
}
float VObject::q_w() const {
  // @@protoc_insertion_point(field_get:VObject.q_w)
  return q_w_;
}
void VObject::set_q_w(float value) {
  
  q_w_ = value;
  // @@protoc_insertion_point(field_set:VObject.q_w)
}

// float color_x = 12;
void VObject::clear_color_x() {
  color_x_ = 0;
}
float VObject::color_x() const {
  // @@protoc_insertion_point(field_get:VObject.color_x)
  return color_x_;
}
void VObject::set_color_x(float value) {
  
  color_x_ = value;
  // @@protoc_insertion_point(field_set:VObject.color_x)
}

// float color_y = 13;
void VObject::clear_color_y() {
  color_y_ = 0;
}
float VObject::color_y() const {
  // @@protoc_insertion_point(field_get:VObject.color_y)
  return color_y_;
}
void VObject::set_color_y(float value) {
  
  color_y_ = value;
  // @@protoc_insertion_point(field_set:VObject.color_y)
}

// float color_z = 14;
void VObject::clear_color_z() {
  color_z_ = 0;
}
float VObject::color_z() const {
  // @@protoc_insertion_point(field_get:VObject.color_z)
  return color_z_;
}
void VObject::set_color_z(float value) {
  
  color_z_ = value;
  // @@protoc_insertion_point(field_set:VObject.color_z)
}

// float color_w = 15;
void VObject::clear_color_w() {
  color_w_ = 0;
}
float VObject::color_w() const {
  // @@protoc_insertion_point(field_get:VObject.color_w)
  return color_w_;
}
void VObject::set_color_w(float value) {
  
  color_w_ = value;
  // @@protoc_insertion_point(field_set:VObject.color_w)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
